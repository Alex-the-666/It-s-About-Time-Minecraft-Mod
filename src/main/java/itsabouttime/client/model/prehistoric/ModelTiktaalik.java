// Date: 11/15/2014 10:19:15 AM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX






package itsabouttime.client.model.prehistoric;

import itsabouttime.common.entities.prehistoric.EntityCompy;
import itsabouttime.common.entities.prehistoric.EntityTiktaalik;
import itsabouttime.common.entities.prehistoric.EntityVelociraptor;
import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.util.MathHelper;

public class ModelTiktaalik extends ModelBase
{
  //fields
    ModelRenderer head;
    ModelRenderer mouth;
    ModelRenderer body;
    ModelRenderer tailbase;
    ModelRenderer tail;
    ModelRenderer leftarm;
    ModelRenderer rightarm;
    ModelRenderer leftleg;
    ModelRenderer rightleg;
    ModelRenderer fin;
  
  public ModelTiktaalik()
  {
    textureWidth = 65;
    textureHeight = 32;
    
      head = new ModelRenderer(this, 17, 0);
      head.addBox(-2.5F, -2F, -4F, 5, 3, 4);
      head.setRotationPoint(0F, 22F, -5F);
      head.setTextureSize(65, 32);
      head.mirror = true;
      setRotation(head, 0F, 0F, 0F);
      mouth = new ModelRenderer(this, 25, 8);
      mouth.addBox(-1.5F, -1.5F, -6F, 3, 2, 2);
      mouth.setRotationPoint(0F, 22F, -5F);
      mouth.setTextureSize(65, 32);
      mouth.mirror = true;
      setRotation(mouth, 0F, 0F, 0F);
      body = new ModelRenderer(this, 36, 0);
      body.addBox(-2F, 0F, -1F, 4, 3, 10);
      body.setRotationPoint(0F, 21F, -4F);
      body.setTextureSize(65, 32);
      body.mirror = true;
      setRotation(body, 0F, 0F, 0F);
      tailbase = new ModelRenderer(this, 49, 13);
      tailbase.addBox(-1.5F, -0.5F, 0F, 3, 2, 5);
      tailbase.setRotationPoint(0F, 22F, 5F);
      tailbase.setTextureSize(65, 32);
      tailbase.mirror = true;
      setRotation(tailbase, 0F, 0F, 0F);
      tail = new ModelRenderer(this, 45, 20);
      tail.addBox(-1F, -0.5F, 5F, 2, 2, 7);
      tail.setRotationPoint(0F, 22F, 5F);
      tail.setTextureSize(65, 32);
      tail.mirror = true;
      setRotation(tail, 0F, 0F, 0F);
      leftarm = new ModelRenderer(this, 5, 22);
      leftarm.addBox(0F, -1F, -1F, 3, 1, 2);
      leftarm.setRotationPoint(2F, 23F, -4F);
      leftarm.setTextureSize(65, 32);
      leftarm.mirror = true;
      setRotation(leftarm, 0F, 0F, 0.3490659F);
      rightarm = new ModelRenderer(this, 15, 22);
      rightarm.addBox(-3F, -1F, -1F, 3, 1, 2);
      rightarm.setRotationPoint(-2F, 23F, -4F);
      rightarm.setTextureSize(65, 32);
      rightarm.mirror = true;
      setRotation(rightarm, 0F, 0F, -0.3490659F);
      leftleg = new ModelRenderer(this, 9, 26);
      leftleg.addBox(0F, 0F, -1F, 2, 1, 2);
      leftleg.setRotationPoint(1F, 23F, 7F);
      leftleg.setTextureSize(65, 32);
      leftleg.mirror = true;
      setRotation(leftleg, 0F, 0F, 0F);
      rightleg = new ModelRenderer(this, 17, 26);
      rightleg.addBox(-2F, 0F, -1F, 2, 1, 2);
      rightleg.setRotationPoint(-1F, 23F, 7F);
      rightleg.setTextureSize(65, 32);
      rightleg.mirror = true;
      setRotation(rightleg, 0F, 0F, 0F);
      fin = new ModelRenderer(this, 27, 18);
      fin.addBox(0F, -4F, 5F, 0, 6, 8);
      fin.setRotationPoint(0F, 22F, 5F);
      fin.setTextureSize(65, 32);
      fin.mirror = true;
      setRotation(fin, 0F, 0F, 0F);
      
      this.convertToChild(head,mouth);
      this.convertToChild(tailbase, leftleg);
      this.convertToChild(tailbase, rightleg);

      this.convertToChild(tailbase, fin);
      this.convertToChild(tailbase, tail);
  }
  protected void convertToChild(ModelRenderer parParent, ModelRenderer parChild)
  {
     // move child rotation point to be relative to parent
     parChild.rotationPointX -= parParent.rotationPointX;
     parChild.rotationPointY -= parParent.rotationPointY;
     parChild.rotationPointZ -= parParent.rotationPointZ;
     // make rotations relative to parent
     parChild.rotateAngleX -= parParent.rotateAngleX;
     parChild.rotateAngleY -= parParent.rotateAngleY;
     parChild.rotateAngleZ -= parParent.rotateAngleZ;
     // create relationship
     parParent.addChild(parChild);
  } 
  public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.render(entity, f, f1, f2, f3, f4, f5);
    setRotationAngles(f, f1, f2, f3, f4, f5, entity);
    head.render(f5);
    body.render(f5);
    tailbase.render(f5);
    leftarm.render(f5);
    rightarm.render(f5);

  }


  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity entity)
  {
    super.setRotationAngles(f, f1, f2, f3, f4, f5, entity);

    this.leftarm.rotateAngleY = MathHelper.cos(f * 0.6662F) * 2.4F * f1;
    this.rightarm.rotateAngleY = MathHelper.sin(f * 0.6662F) * 2.4F * f1;
    this.head.rotateAngleX = f4 / (180F / (float)Math.PI);
    this.head.rotateAngleY = f3 / (180F / (float)Math.PI);

	

  }

}

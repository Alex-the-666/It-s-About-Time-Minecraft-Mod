// Date: 9/24/2014 6:57:00 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX






package itsabouttime.client.model.prehistoric;

import org.lwjgl.opengl.GL11;

import itsabouttime.common.entities.prehistoric.EntityVelociraptor;
import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.passive.EntityWolf;
import net.minecraft.util.MathHelper;

public class ModelVelociraptor extends ModelBase
{
  //fields
    ModelRenderer MainBody;
    ModelRenderer Body2;
    ModelRenderer Body3;
    ModelRenderer Tail1;
    ModelRenderer Tail2;
    ModelRenderer Neck1;
    ModelRenderer Neck2;
    ModelRenderer Head;
    ModelRenderer TopJaw;
    ModelRenderer BottomJaw;
    ModelRenderer HeadFeather;
    ModelRenderer ArmRight;
    ModelRenderer HandRight;
    ModelRenderer ArmFeatherRight;
    ModelRenderer ArmLeft;
    ModelRenderer HandLeft;
    ModelRenderer HandFeatherLeft;
    ModelRenderer RightHip;
    ModelRenderer MiddleLegRight;
    ModelRenderer BottomLegRight;
    ModelRenderer FootRight;
    ModelRenderer LeftHip;
    ModelRenderer MiddleLegLeft;
    ModelRenderer BottomLegLeft;
    ModelRenderer FootLeft;
    ModelRenderer ClawLeft1;
    ModelRenderer ClawLeft2;
    ModelRenderer ClawRight1;
    ModelRenderer ClawRight2;
  
  public ModelVelociraptor()
  {
    textureWidth = 64;
    textureHeight = 64;
    
      MainBody = new ModelRenderer(this, 0, 0);
      MainBody.addBox(-2.5F, -2.5F, 0F, 5, 5, 8);
      MainBody.setRotationPoint(0F, 15F, -2F);
      MainBody.setTextureSize(64, 64);
      MainBody.mirror = true;
      setRotation(MainBody, 0F, 0F, 0F);
      Body2 = new ModelRenderer(this, 0, 14);
      Body2.addBox(-2F, -2F, -1F, 4, 4, 4);
      Body2.setRotationPoint(0F, 15F, 6F);
      Body2.setTextureSize(64, 64);
      Body2.mirror = true;
      setRotation(Body2, 0F, 0F, 0F);
      Body3 = new ModelRenderer(this, 0, 23);
      Body3.addBox(-1.5F, -1.5F, 0F, 3, 3, 5);
      Body3.setRotationPoint(0F, 15F, 8F);
      Body3.setTextureSize(64, 64);
      Body3.mirror = true;
      setRotation(Body3, 0F, 0F, 0F);
      Tail1 = new ModelRenderer(this, 27, 0);
      Tail1.addBox(-1F, -1F, -1F, 2, 2, 10);
      Tail1.setRotationPoint(0F, 15F, 13F);
      Tail1.setTextureSize(64, 64);
      Tail1.mirror = true;
      setRotation(Tail1, 0F, 0F, 0F);
      Tail2 = new ModelRenderer(this, 33, 0);
      Tail2.addBox(-3F, 0F, 0F, 6, 0, 9);
      Tail2.setRotationPoint(0F, 15F, 16F);
      Tail2.setTextureSize(64, 64);
      Tail2.mirror = true;
      setRotation(Tail2, 0F, 0F, 0F);
      Neck1 = new ModelRenderer(this, 0, 32);
      Neck1.addBox(-2F, -2F, -4F, 4, 4, 4);
      Neck1.setRotationPoint(0F, 15F, -1F);
      Neck1.setTextureSize(64, 64);
      Neck1.mirror = true;
      setRotation(Neck1, -0.296706F, 0F, 0F);
      Neck2 = new ModelRenderer(this, 0, 41);
      Neck2.addBox(-1.5F, -1.5F, -4F, 3, 3, 4);
      Neck2.setRotationPoint(0F, 14F, -4F);
      Neck2.setTextureSize(64, 64);
      Neck2.mirror = true;
      setRotation(Neck2, -0.6283185F, 0F, 0F);
      Head = new ModelRenderer(this, 0, 49);
      Head.addBox(-2F, -2F, -5F, 4, 4, 5);
      Head.setRotationPoint(0F, 12F, -6F);
      Head.setTextureSize(64, 64);
      Head.mirror = true;
      setRotation(Head, 0F, 0F, 0F);
      TopJaw = new ModelRenderer(this, 17, 14);
      TopJaw.addBox(-1.5F, -1.5F, -4F, 3, 3, 4);
      TopJaw.setRotationPoint(0F, 11.6F, -11F);
      TopJaw.setTextureSize(64, 64);
      TopJaw.mirror = true;
      setRotation(TopJaw, 0.0349066F, 0F, 0F);
      BottomJaw = new ModelRenderer(this, 17, 22);
      BottomJaw.addBox(-1.5F, -0.5F, -4F, 3, 1, 4);
      BottomJaw.setRotationPoint(0F, 13F, -10.7F);
      BottomJaw.setTextureSize(64, 64);
      BottomJaw.mirror = true;
      setRotation(BottomJaw, 0.2843723F, 0F, 0F);
      HeadFeather = new ModelRenderer(this, 17, 23);
      HeadFeather.addBox(0F, -4F, 0F, 0, 4, 5);
      HeadFeather.setRotationPoint(0F, 10F, -11F);
      HeadFeather.setTextureSize(64, 64);
      HeadFeather.mirror = true;
      setRotation(HeadFeather, -0.4363323F, 0F, 0F);
      ArmRight = new ModelRenderer(this, 17, 33);
      ArmRight.addBox(-0.5F, 0F, 0F, 1, 3, 1);
      ArmRight.setRotationPoint(-2F, 17F, -2F);
      ArmRight.setTextureSize(64, 64);
      ArmRight.mirror = true;
      setRotation(ArmRight, -0.3490659F, 0F, 0.3490659F);
      HandRight = new ModelRenderer(this, 17, 38);
      //
      HandRight.addBox(-0.5F, -0.5F, -4F, 1, 1, 4);
      HandRight.setRotationPoint(-2F, 19.5F, -2F);
      HandRight.setTextureSize(64, 64);
      HandRight.mirror = true;
      setRotation(HandRight, 0F, 0F, 0.3490659F);
      ArmFeatherRight = new ModelRenderer(this, 17, 39);
      ArmFeatherRight.addBox(0F, 0F, 0F, 0, 3, 5);
      ArmFeatherRight.setRotationPoint(-2F, 20F, -5F);
      ArmFeatherRight.setTextureSize(64, 64);
      ArmFeatherRight.mirror = true;
      setRotation(ArmFeatherRight, 0.3316126F, 0F, 0.3490659F);
      ArmLeft = new ModelRenderer(this, 17, 33);
      ArmLeft.addBox(-0.5F, 0F, 0F, 1, 3, 1);
      ArmLeft.setRotationPoint(2F, 17F, -2F);
      ArmLeft.setTextureSize(64, 64);
      ArmLeft.mirror = true;
      setRotation(ArmLeft, -0.3490659F, 0F, -0.3490659F);
      HandLeft = new ModelRenderer(this, 17, 38);
      HandLeft.addBox(-0.5F, -0.5F, -4F, 1, 1, 4);
      HandLeft.setRotationPoint(2F, 19.5F, -2F);
      HandLeft.setTextureSize(64, 64);
      HandLeft.mirror = true;
      setRotation(HandLeft, 0F, 0F, -0.3490659F);
      HandFeatherLeft = new ModelRenderer(this, 17, 43);
      HandFeatherLeft.addBox(0F, 0F, 0F, 0, 3, 5);
      HandFeatherLeft.setRotationPoint(2F, 20F, -5F);
      HandFeatherLeft.setTextureSize(64, 64);
      HandFeatherLeft.mirror = true;
      setRotation(HandFeatherLeft, 0.3316126F, 0F, -0.3490659F);
      RightHip = new ModelRenderer(this, 32, 14);
      RightHip.addBox(-2F, -1.5F, -1.5F, 2, 3, 3);
      RightHip.setRotationPoint(-2.5F, 15F, 4F);
      RightHip.setTextureSize(64, 64);
      RightHip.mirror = true;
      setRotation(RightHip, 0F, 0F, 0F);
      MiddleLegRight = new ModelRenderer(this, 32, 21);
      MiddleLegRight.addBox(-1F, 0F, -1F, 2, 4, 2);
      MiddleLegRight.setRotationPoint(-3.4F, 16F, 4F);
      MiddleLegRight.setTextureSize(64, 64);
      MiddleLegRight.mirror = true;
      setRotation(MiddleLegRight, -0.4712389F, 0F, 0F);
      BottomLegRight = new ModelRenderer(this, 32, 28);
      BottomLegRight.addBox(-1F, 0F, -1F, 2, 4, 2);
      BottomLegRight.setRotationPoint(-3.3F, 19.2F, 3.7F);
      BottomLegRight.setTextureSize(64, 64);
      BottomLegRight.mirror = true;
      setRotation(BottomLegRight, 0.2792527F, 0F, 0F);
      FootRight = new ModelRenderer(this, 32, 35);
      FootRight.addBox(-1F, 0F, -2F, 2, 2, 3);
      FootRight.setRotationPoint(-3.5F, 22F, 3.5F);
      FootRight.setTextureSize(64, 64);
      FootRight.mirror = true;
      setRotation(FootRight, 0F, 0F, 0F);
      LeftHip = new ModelRenderer(this, 43, 14);
      LeftHip.addBox(0F, -1.5F, -1.5F, 2, 3, 3);
      LeftHip.setRotationPoint(2.5F, 15F, 4F);
      LeftHip.setTextureSize(64, 64);
      LeftHip.mirror = true;
      setRotation(LeftHip, 0F, 0F, 0F);
      MiddleLegLeft = new ModelRenderer(this, 43, 21);
      MiddleLegLeft.addBox(-1F, 0F, -1F, 2, 4, 2);
      MiddleLegLeft.setRotationPoint(3.4F, 16F, 4F);
      MiddleLegLeft.setTextureSize(64, 64);
      MiddleLegLeft.mirror = true;
      setRotation(MiddleLegLeft, -0.4712389F, 0F, 0F);
      BottomLegLeft = new ModelRenderer(this, 43, 28);
      BottomLegLeft.addBox(-1F, 0F, -1F, 2, 4, 2);
      BottomLegLeft.setRotationPoint(3.3F, 19.2F, 3.7F);
      BottomLegLeft.setTextureSize(64, 64);
      BottomLegLeft.mirror = true;
      setRotation(BottomLegLeft, 0.2792527F, 0F, 0F);
      FootLeft = new ModelRenderer(this, 43, 35);
      FootLeft.addBox(-1F, 0F, -2F, 2, 2, 3);
      FootLeft.setRotationPoint(3.5F, 22F, 3.5F);
      FootLeft.setTextureSize(64, 64);
      FootLeft.mirror = true;
      setRotation(FootLeft, 0F, 0F, 0F);
      ClawLeft1 = new ModelRenderer(this, 32, 41);
      ClawLeft1.addBox(-0.6F, -0.5F, -2F, 1, 1, 2);
      ClawLeft1.setRotationPoint(-3F, 23F, 2F);
      ClawLeft1.setTextureSize(64, 64);
      ClawLeft1.mirror = true;
      setRotation(ClawLeft1, -0.8028515F, 0F, 0F);
      ClawLeft2 = new ModelRenderer(this, 32, 41);
      ClawLeft2.addBox(-0.6F, -0.5F, -2F, 1, 2, 1);
      ClawLeft2.setRotationPoint(-3F, 23F, 2F);
      ClawLeft2.setTextureSize(64, 64);
      ClawLeft2.mirror = true;
      setRotation(ClawLeft2, -0.8028515F, 0F, 0F);
      ClawRight1 = new ModelRenderer(this, 32, 41);
      ClawRight1.addBox(-0.4F, -0.5F, -2F, 1, 1, 2);
      ClawRight1.setRotationPoint(3F, 23F, 2F);
      ClawRight1.setTextureSize(64, 64);
      ClawRight1.mirror = true;
      setRotation(ClawRight1, -0.8028515F, 0F, 0F);
      ClawRight2 = new ModelRenderer(this, 32, 41);
      ClawRight2.addBox(-0.4F, -0.5F, -2F, 1, 2, 1);
      ClawRight2.setRotationPoint(3F, 23F, 2F);
      ClawRight2.setTextureSize(64, 64);
      ClawRight2.mirror = true;
      setRotation(ClawRight2, -0.8028515F, 0F, 0F);
      
      convertToChild(Head, HeadFeather);
      convertToChild(Head, TopJaw);
      convertToChild(Head, BottomJaw);
      
      convertToChild(HandRight, ArmFeatherRight);
      convertToChild(ArmRight, HandRight);
      
      convertToChild(HandLeft, HandFeatherLeft);
      convertToChild(ArmLeft, HandLeft);
      
   convertToChild(ClawLeft1, ClawLeft2);
   convertToChild(FootRight, ClawLeft1);
   convertToChild(BottomLegRight, FootRight);
   convertToChild(MiddleLegRight, BottomLegRight);
   convertToChild(RightHip, MiddleLegRight);
   
   convertToChild(ClawRight1, ClawRight2);
   convertToChild(FootLeft, ClawRight1);
   convertToChild(BottomLegLeft, FootLeft);
   convertToChild(MiddleLegLeft, BottomLegLeft);
   convertToChild(LeftHip, MiddleLegLeft);
      
  }
  public void render(Entity p_78088_1_, float p_78088_2_, float p_78088_3_, float p_78088_4_, float p_78088_5_, float p_78088_6_, float p_78088_7_)
  {
      super.render(p_78088_1_, p_78088_2_, p_78088_3_, p_78088_4_, p_78088_5_, p_78088_6_, p_78088_7_);
      this.setRotationAngles(p_78088_2_, p_78088_3_, p_78088_4_, p_78088_5_, p_78088_6_, p_78088_7_, p_78088_1_);

      if (this.isChild)
      {
          float f6 = 2.0F;
          GL11.glPushMatrix();
          GL11.glTranslatef(0.0F, 5.0F * p_78088_7_, 2.0F * p_78088_7_);
          GL11.glTranslatef(0, 0, 0.1f);
  	    Head.render(p_78088_7_);
          GL11.glPopMatrix();
          GL11.glPushMatrix();
          GL11.glScalef(1.0F / f6, 1.0F / f6, 1.0F / f6);
          GL11.glTranslatef(0.0F, 24.0F * p_78088_7_, 0.0F);
          MainBody.render(p_78088_7_);
  	    Body2.render(p_78088_7_);
  	    Body3.render(p_78088_7_);
  	    Tail1.render(p_78088_7_);
  	    Tail2.render(p_78088_7_);
  	    Neck1.render(p_78088_7_);
  	    Neck2.render(p_78088_7_);
  	  ArmRight.render(p_78088_7_);
	    ArmLeft.render(p_78088_7_);
	    RightHip.render(p_78088_7_);
	    LeftHip.render(p_78088_7_);
          GL11.glPopMatrix();
      }
      else
      {
    	  MainBody.render(p_78088_7_);
    	    Body2.render(p_78088_7_);
    	    Body3.render(p_78088_7_);
    	    Tail1.render(p_78088_7_);
    	    Tail2.render(p_78088_7_);
    	    Neck1.render(p_78088_7_);
    	    Neck2.render(p_78088_7_);
    	    Head.render(p_78088_7_);
    	    ArmRight.render(p_78088_7_);
    	    ArmLeft.render(p_78088_7_);
    	    RightHip.render(p_78088_7_);
    	    LeftHip.render(p_78088_7_);
      }
  }

  protected void convertToChild(ModelRenderer parParent, ModelRenderer parChild)
  {
     // move child rotation point to be relative to parent
     parChild.rotationPointX -= parParent.rotationPointX;
     parChild.rotationPointY -= parParent.rotationPointY;
     parChild.rotationPointZ -= parParent.rotationPointZ;
     // make rotations relative to parent
     parChild.rotateAngleX -= parParent.rotateAngleX;
     parChild.rotateAngleY -= parParent.rotateAngleY;
     parChild.rotateAngleZ -= parParent.rotateAngleZ;
     // create relationship
     parParent.addChild(parChild);
  } 
  public void setLivingAnimations(EntityLivingBase p_78086_1_, float p_78086_2_, float p_78086_3_, float p_78086_4_)
  {
      EntityVelociraptor entitywolf = (EntityVelociraptor)p_78086_1_;

      

      if (entitywolf.isSitting())
      {
    	  //-4
MainBody.rotateAngleX= -0.4712389F;
Body2.rotationPointY=19F;
Body3.rotationPointY=20F;
Tail1.rotationPointY=21F;
Tail2.rotationPointY=21F;
Body2.rotateAngleX= -0.3490659F;
Body3.rotateAngleX= -0.3141593F;
Tail1.rotateAngleX= -0.2094395F;
Tail2.rotateAngleX= -0.2094395F;
RightHip.rotationPointY=17F;
LeftHip.rotationPointY=17F;

      }else{
    	  MainBody.rotateAngleX= 0f;
    	  Body2.rotationPointY=15F;
    	  Body3.rotationPointY=15F;
    	  Tail1.rotationPointY=15F;
    	  Tail2.rotationPointY=15F;
    	  Body2.rotateAngleX= 0f;
    	  Body3.rotateAngleX= 0f;
    	  Tail1.rotateAngleX= 0f;
    	  Tail2.rotateAngleX= 0f;
    	  RightHip.rotationPointY=15F;
    	  LeftHip.rotationPointY=15F;
    	  
      }

  }

  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity entity)
  {
    super.setRotationAngles(f, f1, f2, f3, f4, f5, entity);
   // this.Head.rotateAngleX = f4 / (31F / (float)Math.PI);
    //this.Head.rotateAngleY = f5 / (76F / (float)Math.PI);
    //this.wolfTail.rotateAngleX = f2;
    this.Head.rotateAngleX = f4 / (180F / (float)Math.PI);
    this.Head.rotateAngleY = f3 / (180F / (float)Math.PI);
    //TheRightHip is acctually the left
    this.RightHip.rotateAngleX = MathHelper.cos(f * 0.6662F) * 1.4F * f1;
    this.LeftHip.rotateAngleX = MathHelper.sin(f * 0.6662F) * 1.4F * f1;

    this.ArmLeft.rotateAngleX = MathHelper.cos(f * 0.6662F + (float)Math.PI) * 1.4F * f1;
    this.ArmRight.rotateAngleX = MathHelper.sin(f * 0.6662F) * 1.4F * f1;
  }


}
